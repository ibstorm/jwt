name: Build and Push Docker Image and Update GitOps

on:
  push:
    branches:
      - main
    tags:
      - "*"  # Triggers workflow when a tag is pushed

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Get the short commit SHA to use as a Docker tag
      - name: Get short commit SHA
        id: get_sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build and push the Docker image with the short SHA tag
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/jwt:${{ env.SHORT_SHA }}

      # Optional: Logout from Docker Hub
      - name: Log out from Docker Hub
        run: docker logout

  # Add a new job to update the deployment.yaml in GitOps folder
  update-gitops:
    runs-on: ubuntu-latest
    needs: build-and-push # This job depends on the successful completion of the build-and-push job
    steps:
      - name: Checkout GitOps repository (or the same repository if GitOps is a subfolder)
        uses: actions/checkout@v3
        with:
          # Use a PAT with write access to the repository to allow pushing changes
          token: ${{ secrets.REPO_ACCESS_TOKEN }} # Create this secret in your repo settings

      - name: Get short commit SHA from previous job's output
        run: |
          # The SHORT_SHA was already set as an environment variable in the previous job,
          # and environment variables are implicitly passed between jobs in the same workflow.
          # However, it's safer to explicitly retrieve it if you are passing from a different job
          # or if you want to ensure it's available.
          # For this specific case where it's already an env var from the previous job,
          # you might not strictly need to echo it again here, but it makes the intent clear.
          echo "Using SHA: ${{ env.SHORT_SHA }}"

      - name: Update image tag in deployment.yaml
        run: |
          # Navigate to your GitOps folder
          cd GitOps

          # Assuming your deployment.yaml has an image tag like "image: your-repo/your-image:old-tag"
          # This 'sed' command will replace the image tag.
          # You might need to adjust the regex based on your exact deployment.yaml structure.
          # Example: Replace "your-repo/jwt:.*" with "your-repo/jwt:${{ env.SHORT_SHA }}"
          sed -i "s|image: ${{ secrets.DOCKER_USERNAME }}/jwt:.*|image: ${{ secrets.DOCKER_USERNAME }}/jwt:${{ env.SHORT_SHA }}|g" deployment.yaml

          # Commit the changes
          git config user.name "GitHub Actions"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add deployment.yaml
          git commit -m "Update jwt image to ${{ env.SHORT_SHA }}"

          # Push the changes back to the repository
          # It's important to use --force-with-lease or --no-verify if needed, but be cautious with force pushes.
          # For a standard GitOps flow, you'd typically push to the same branch.
          git push